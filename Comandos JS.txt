1. Declaração de Variáveis
Variáveis armazenam dados que podem ser usados e manipulados ao longo do código.

var → Declara uma variável global ou local sem escopo restrito a blocos. (Pouco usado atualmente)
let → Declara uma variável que pode ter seu valor alterado e tem escopo de bloco.
const → Declara uma constante que não pode ser alterada após a atribuição.

>>>EXEMPLO:
let nome = "João";
const idade = 25;
var cidade = "São Paulo";


2. Tipos de Dados
Os principais tipos de dados em JavaScript são:

String → Texto (ex: "Olá, mundo!")
Number → Números (ex: 10, 3.14)
Boolean → Verdadeiro (true) ou Falso (false)
Array → Lista de valores (ex: [1, 2, 3])
Object → Estrutura de chave e valor (ex: { nome: "João", idade: 25 })
Null → Representa ausência de valor
Undefined → Variável declarada sem valor atribuído



3. Operadores
Usados para manipular valores e variáveis.

>>>Operadores Aritméticos
+ → Adição
- → Subtração
* → Multiplicação
/ → Divisão
% → Resto da divisão
** → Exponenciação

>>>EXEMPLO:
let resultado = 5 + 3; // 8

>>>Operadores de Comparação
== → Igualdade (com conversão de tipo)
=== → Igualdade estrita (sem conversão de tipo)
!= → Diferença
!== → Diferença estrita
> → Maior que
< → Menor que
>= → Maior ou igual
<= → Menor ou igual

>>>Operadores Lógicos
&& → "E" lógico (true se ambos forem verdadeiros)
|| → "Ou" lógico (true se um dos dois for verdadeiro)
! → Negação lógica

>>>EXEMPLO:
let maiorDeIdade = (idade >= 18) && (idade < 60);



4. Estruturas de Controle
Condicionais (if, else, switch)
Permitem tomar decisões no código.

>>>EXEMPLO:
let idade = 20;

if (idade >= 18) {
    console.log("Maior de idade");
} else {
    console.log("Menor de idade");
}

// Switch
let cor = "vermelho";

switch (cor) {
    case "azul":
        console.log("A cor é azul");
        break;
    case "vermelho":
        console.log("A cor é vermelha");
        break;
    default:
        console.log("Cor desconhecida");
}



5. Laços de Repetição (Loops)
Usados para executar um bloco de código várias vezes.

for (Laço Contado)

>>>EXEMPLO:
for (let i = 0; i < 5; i++) {
    console.log("Repetição " + i);
}


while (Laço Condicional)

>>>EXEMPLO:
let contador = 0;
while (contador < 5) {
    console.log("Contador: " + contador);
    contador++;
}


do...while (Executa pelo menos uma vez)

>>>EXEMPLO:
let numero = 0;
do {
    console.log("Número: " + numero);
    numero++;
} while (numero < 5);



6. Funções
Blocos de código reutilizáveis.

Função Simples

>>>EXEMPLO:

function saudacao(nome) {
    return "Olá, " + nome;
}

console.log(saudacao("Maria"));


Arrow Function (Função de seta)

>>>EXEMPLO:
const soma = (a, b) => a + b;
console.log(soma(5, 3)); // 8



7. Manipulação do DOM
Permite interagir com elementos HTML.

document.getElementById("id") → Seleciona um elemento pelo ID
document.querySelector(".classe") → Seleciona o primeiro elemento que corresponde à classe
document.querySelectorAll("tag") → Seleciona todos os elementos que correspondem à tag

>>>EXEMPLO:
document.getElementById("titulo").innerText = "Novo título";



8. Eventos
Responde a interações do usuário.

onclick → Executa código ao clicar
onmouseover → Executa código ao passar o mouse
onchange → Executa código ao mudar um input

>>>EXEMPLO:
document.getElementById("botao").addEventListener("click", function() {
    alert("Botão clicado!");
});



9. Arrays e Métodos de Arrays
Arrays armazenam múltiplos valores.

>>>EXEMPLO:
let frutas = ["Maçã", "Banana", "Laranja"];

frutas.push("Uva");  // Adiciona no final
frutas.pop();  // Remove o último elemento
frutas.shift(); // Remove o primeiro elemento
frutas.unshift("Melancia"); // Adiciona no início
console.log(frutas.length); // Retorna o tamanho do array



10. Objetos
Estruturas que armazenam pares de chave-valor.

>>>EXEMPLO:
let pessoa = {
    nome: "João",
    idade: 30,
    saudacao: function() {
        return "Olá, " + this.nome;
    }
};

console.log(pessoa.saudacao());



11. Promises e Async/Await
Usados para trabalhar com operações assíncronas.

>>>EXEMPLO:
const minhaPromise = new Promise((resolve, reject) => {
    setTimeout(() => resolve("Sucesso!"), 2000);
});

minhaPromise.then(resultado => console.log(resultado)); // Após 2s: "Sucesso!"


Com async/await:

>>>EXEMPLO:
async function buscarDados() {
    let resposta = await fetch("https://jsonplaceholder.typicode.com/todos/1");
    let dados = await resposta.json();
    console.log(dados);
}
buscarDados();


---------------------


